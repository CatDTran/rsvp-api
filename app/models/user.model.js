/*
*NOTE: This file defines the user schema model. Use this file to add any middlewares, querries, validations ... related to this schema.
*/
var mongoose = require('mongoose'),
    Schema = mongoose.Schema;
var bcrypt   = require('bcrypt-nodejs');

// require onther schemas so that we can reference them
var reservationSchema = require('./reservation.model.js');
var rsvpBookSchema = require('./rsvpbook.model.js')

//--------------Schema definition---------------//
var UserSchema = new Schema({
  phone: Number,
  local : {
    email:    { type: String, lowercase: true, required: requiredValidation },  // NOTE: requiredValidation return true or false depends on whether google && facebook credentials are null,
    password: {type: String,                   required: requiredValidation },  // this way at least one of local, facebook, or google credentials must be filled before saving to the database
    name:     {
                first: {type: String,          required: requiredValidation},
                last: { type: String,          required: requiredValidation }
              }
  },
  facebook: {
    id           : String,
    token        : String,
    email        : {type: String, lowercase: true},
    name         : String
  },
  google: {
    id           : String,
    token        : String,
    email        : {type: String, lowercase: true},
    name         : String
  },
  adminOf: [ Schema.Types.ObjectId ], // contains ObjectId of rsvp book if available
  bookBelong: [ Schema.Types.ObjectId ], // a list of rsvp book that this user belongs to
  reservations: [ Schema.Types.ObjectId ] // list contains reservations that this user has
},
  { timeStamp: {createdAt: 'createdAt', updatedAt: 'updatedAt'} // timeStamp will be generated by mongoose
});

// generating a hash
UserSchema.methods.generateHash = function(password) {
    return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
};
// checking if password is valid
UserSchema.methods.validPassword = function(password) {
    return bcrypt.compareSync(password, this.local.password);
};


//--------------Define middlewares for 'pre' and 'post' hooks here---------------//
var requiredValidation =  function(){ // facebook and google credentials is null, set local credential 'required' to true
  if ( (this.facebook == null) && (this.google == null) ){
    return true
  }
};

//----------------Define Virtuals here----------------//
UserSchema.virtual('getFullName').get(function(){
  return this.first + ' ' + this.last;
});
UserSchema.virtual('getNumber').get(function(){
  return this.phone;
});
UserSchema.virtual('getAdminOf').get(function(){
  return this.adminOf;
});
UserSchema.virtual('getReservations').get(function(){
  return this.reservations;
});

// create the model for users and expose it to our app
module.exports = mongoose.model('User', UserSchema);
